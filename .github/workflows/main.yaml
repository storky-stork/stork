name: CI/CD
on:
  push:
    branches:
      - dev
  pull_request:

permissions:
  id-token: write

jobs:


        
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout [dev]
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16'
      - run: npm install
      - run: npx nx affected --target=deploy --parallel=3
      - name: Upload the build output
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: |
            dist/packages
          retention-days: 1
      - name: configureawscredentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
        # role-to-assume: arn:aws:iam::580976669327:role/github-actions-role
        # role-session-name: samplerolesession
        # aws-region: ${{env.AWS_DEFAULT_REGION}}
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{env.AWS_DEFAULT_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: storky
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  pr:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16'
      - run: npm install
      - run: npx nx affected --target=build --parallel=3
      - run: npx nx affected --target=test --parallel=2

  # aws-connection:
  #   needs: [build] 
  #   runs-on: ubuntu-latest
  #   env:
  #    AWS_DEFAULT_REGION: us-east-1
  #   steps:
  #    - name: configureawscredentials
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #       # role-to-assume: arn:aws:iam::580976669327:role/github-actions-role
  #       # role-session-name: samplerolesession
  #       # aws-region: ${{env.AWS_DEFAULT_REGION}}
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{env.AWS_DEFAULT_REGION}}

  #    - name: Login to Amazon ECR
  #      id: login-ecr
  #      uses: aws-actions/amazon-ecr-login@v1
      
  #    - name: Build, tag, and push image to Amazon ECR
  #      env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: storky
  #         IMAGE_TAG: ${{ github.sha }}
  #      run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG